"""
Django settings for market project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from logging import DEBUG
import os
from pathlib import Path

from dotenv import load_dotenv

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
load_dotenv(os.path.join(BASE_DIR, "market", ".env"))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY",
    default="django-insecure-493s(bzyk&n22(0st%mj&zikk7j@fta*wu)pl3yyr!j8ih$emw",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", default=True)

ALLOWED_HOSTS = ["*"]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("predict.auth.BasicAuthentication",)
}


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "djoser",
    "knox",
    "predict",
    "prediction",
    "django_crontab",
    "drf_api_logger",
    #"django_nose",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware",
]

ROOT_URLCONF = "market.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates/"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "market.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("DB_NAME", default="prediction"),
        "USER": os.environ.get("DB_USER", default="root"),
        "PASSWORD": os.environ.get("DB_PASSWORD", default=""),
        "HOST": os.environ.get("DB_HOST", default="localhost"),
        "PORT": os.environ.get("DB_PORT", default=""),
    },
    "crypto": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("DB_CRYPTO_NAME", default="cryptos_db"),
        "USER": os.environ.get("DB_CRYPTO_USER", default=""),
        "PASSWORD": os.environ.get("DB_CRYPTO_PASSWORD", default=""),
        "HOST": os.environ.get("DB_CRYPTO_HOST", default=""),
        "PORT": os.environ.get("DB_CRYPTO_PORT", default=""),
    },
}


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STRIPE_PUBLIC_KEY = "pk_test_51Ji3IsImts649PkQ6cqroBQmjYUhzTK7LFYXsSrGEKtUou11yXl8V2rQ0SCmgFSeVejYTo9MWuKktQ2900szuNcU00B13OhWRO"

STRIPE_SECRET_KEY = "sk_test_51Ji3IsImts649PkQlT2xwZJH3seuqZ7wjsI5s7tt3IPydnmoCAQv8syt4Gm7IwkU0cuc7FfkGATJXiTvDoNywPxV00U7nGx7EI"

STATIC_URL = "/static/"

MEDIA_URL = "/images/"

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

MEDIA_ROOT = os.path.join(BASE_DIR, "static/images")

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

DRF_API_LOGGER_DATABASE = True
DRF_API_LOGGER_SIGNAL = True
DRF_API_LOGGER_SIGNAL = True

# DRF_LOGGER_QUEUE_MAX_SIZE = 50
# DRF_LOGGER_INTERVAL = 10
DRF_API_LOGGER_EXCLUDE_KEYS = ["password", "token"]
DRF_API_LOGGER_PATH_TYPE = "ABSOLUTE"


PARM_INTERVAL = {
    "day" : os.environ.get("PARM_INTERVAL_DAY", default=500),
    "hour" : os.environ.get("PARM_INTERVAL_HOUR", default=500),
    "minute" : os.environ.get("PARM_INTERVAL_MINUTE", default=500)
}
"""
# Use nose to run all tests
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# Tell nose to measure coverage on the 'foo' and 'bar' apps
NOSE_ARGS = [
    '--with-coverage',
    '--cover-erase',
    '--cover-inclusive',
    '--cover-package = predict',  
]
"""